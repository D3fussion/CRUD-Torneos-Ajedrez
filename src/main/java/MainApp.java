import db.Database;
import db.JDBCTableAdapter;
import db.delete.*;
import db.insert.*;
import db.read.TableBrowser;
import db.update.Updater;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashSet;
public class MainApp extends javax.swing.JFrame {


    private Database db;
    private BufferedImage fondo;
    private final ImageIcon iconoAjedrez = new ImageIcon("icono.png");
    public MainApp() {
        //Abrir la conexiÃ³n a la base de datos
//        String USER = "a222206011";
//        String PASS = "222206011";
        initComponents();
        setIcono();
        this.setSize(1000, 800);
        this.setLocationRelativeTo(null);
        db = Database.getDatabase(desktopPane, true);

        File wallpaperFile = new File("fondoDePantalla.png");
        if (wallpaperFile.exists()) {
            try {
                // Leer la imagen del archivo
                BufferedImage wallpaperImage = ImageIO.read(wallpaperFile);

                // Establecer la imagen como el fondo de desktopPane
                fondo = wallpaperImage;
                desktopPane.repaint();
            } catch (IOException e) {
                JOptionPane.showInternalMessageDialog(desktopPane, "Error loading wallpaper", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

        //Evitar que se cierre la ventana
        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                quieresSalir();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {

        desktopPane = new JDesktopPane() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                if (fondo != null) {
                    g.drawImage(fondo, 25, 25, getWidth()-50, getHeight()-50, this);
                }
            }
        };
        JMenuBar menuBar = new JMenuBar();

        JMenu menuInsertar = new JMenu();
        JMenuItem insertClub = new JMenuItem();
        JMenuItem insertJugador = new JMenuItem();
        JMenuItem insertPatrocinador = new JMenuItem();
        JMenuItem insertOrganizador = new JMenuItem();
        JMenuItem insertParticipantes = new JMenuItem();
        JMenuItem insertTorneo = new JMenuItem();
        JMenuItem insertPartida = new JMenuItem();
        JMenuItem insertRanking = new JMenuItem();
        JMenuItem insertResultCode = new JMenuItem();
        JMenuItem insertTorneoPatro = new JMenuItem();
        
        JMenuItem payClubFees = new JMenuItem();
        JMenuItem tournamentPrizePaid = new JMenuItem();
        JMenuItem sponsorPaid = new JMenuItem();



        JMenu menuUpdate = new JMenu();
        JMenuItem updateClub = new JMenuItem();
        JMenuItem updateJugador = new JMenuItem();
        JMenuItem updatePatrocinador = new JMenuItem();
        JMenuItem updateOrganizador = new JMenuItem();
        JMenuItem updateParticipantes = new JMenuItem();
        JMenuItem updateTorneo = new JMenuItem();
        JMenuItem updatePartida = new JMenuItem();
        JMenuItem updateRanking = new JMenuItem();
        JMenuItem updateResultados = new JMenuItem();
        JMenuItem updateTorneoPatro = new JMenuItem();

        JMenu menuBrowse = new JMenu();
        JMenu menuConsulta = new JMenu();
        JMenuItem browseClubs = new JMenuItem();
        JMenuItem browseJugadores = new JMenuItem();
        JMenuItem browseTorneosPatro = new JMenuItem();
        JMenuItem browsePatro = new JMenuItem();
        JMenuItem browseParticipantes = new JMenuItem();
        JMenuItem browsePartidas = new JMenuItem();
        JMenuItem browseRanking = new JMenuItem();
        JMenuItem browseResults = new JMenuItem();
        JMenuItem browseTorneos = new JMenuItem();
        JMenuItem browseOrganizadores = new JMenuItem();
        JMenuItem itemConsulta1 = new JMenuItem();
        JMenuItem itemConsulta2 = new JMenuItem();
        JMenuItem itemConsulta3 = new JMenuItem();

        JMenuItem browsePlayerClubFeesPaid = new JMenuItem();
        JMenuItem browseTournamentPrizePaidOut = new JMenuItem();
        JMenuItem browseTournamentSponsorPaid = new JMenuItem();

        JMenu menuDelete = new JMenu();
        JMenuItem jMenuItem1 = new JMenuItem();
        JMenuItem jMenuItem2 = new JMenuItem();
        JMenuItem jMenuItem3 = new JMenuItem();
        JMenuItem jMenuItem4 = new JMenuItem();
        JMenuItem jMenuItem5 = new JMenuItem();
        JMenuItem jMenuItem6 = new JMenuItem();
        JMenuItem jMenuItem7 = new JMenuItem();
        JMenuItem jMenuItem8 = new JMenuItem();
        JMenuItem jMenuItem9 = new JMenuItem();
        JMenuItem jMenuItem10 = new JMenuItem();


        JMenu helpMenu = new JMenu();
        JMenuItem contentMenuItem = new JMenuItem();
        JMenuItem aboutMenuItem = new JMenuItem();
        JMenuItem newConection = new JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        menuConsulta.setMnemonic('r');
        menuConsulta.setText("Actions");
        menuConsulta.addActionListener(this::menuConsultaActionPerformed);
        

        itemConsulta1.setText("Tournaments with no sponsors");
        itemConsulta1.addActionListener(this::mostrarConsulta1);
        menuConsulta.add(itemConsulta1);

        itemConsulta2.setText("Champions");
        itemConsulta2.addActionListener(this::mostrarConsulta2);
        menuConsulta.add(itemConsulta2);

        itemConsulta3.setText("Players Per Club");
        itemConsulta3.addActionListener(this::mostrarConsulta3);
        menuConsulta.add(itemConsulta3);

        payClubFees.setText("Pay Club Fees");
        menuConsulta.add(payClubFees);
        payClubFees.addActionListener(e -> {

            JTextField playerIDField = new JTextField();
            JTextField clubIDField = new JTextField();
            JTextField paidField = new JTextField();
            Object[] message = {
                "PlayerID:", playerIDField,
                "ClubID:", clubIDField,
                "Paid:", paidField
            };
        
            int option = JOptionPane.showInternalConfirmDialog(desktopPane, message, "Pay Club Fees", JOptionPane.OK_CANCEL_OPTION);
            if (option == JOptionPane.OK_OPTION) {
                if(playerIDField.getText().isEmpty() || clubIDField.getText().isEmpty() || paidField.getText().isEmpty()){
                    JOptionPane.showInternalMessageDialog(desktopPane, "Please fill out all fields", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if(!playerIDField.getText().matches("[0-9]+")){
                    JOptionPane.showInternalMessageDialog(desktopPane, "Player ID must be a number", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if(!clubIDField.getText().matches("[0-9]+")){
                    JOptionPane.showInternalMessageDialog(desktopPane, "Club ID must be a number", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if(!(paidField.getText().equals("true") || paidField.getText().equals("false") || paidField.getText().equals("True") || paidField.getText().equals("False"))){
                    JOptionPane.showInternalMessageDialog(desktopPane, "Paid must be 'true' or 'false'", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                String playerID = playerIDField.getText();
                String clubID = clubIDField.getText();
                String paid = paidField.getText();
               
                
                if (playerID.contains("'")) {
                    playerID = playerID.replaceAll("'", "''");
                }
                
    
                StringBuilder sql;
                sql = new StringBuilder("INSERT INTO player_club_fees_paid (playerID, clubID, feePaid) VALUES ('");
                sql.append(playerID);
                sql.append("','");
                sql.append(clubID);
                sql.append("','");
                sql.append(paid);
                sql.append("');");

               
    
                System.out.println(sql);
    
                try {
                    db.update(sql.toString());
                    db.con.commit();
                   
                } catch (SQLException ex) {
                    System.out.println(ex.getMessage());
                    JOptionPane.showInternalMessageDialog(desktopPane, "The entry may already exist", "Error", JOptionPane.ERROR_MESSAGE);
                    try {
                        db.con.commit();
                    } catch (SQLException exc) {
                        throw new RuntimeException(exc);
                    }
                }

            }
        });


        browsePlayerClubFeesPaid.setText("Browse Player Club Fees Paid");
        browsePlayerClubFeesPaid.addActionListener(this::browseTablaPlayerClubFeesPaid);
        menuConsulta.add(browsePlayerClubFeesPaid);


         tournamentPrizePaid.setText("Prize Payout");
         menuConsulta.add(tournamentPrizePaid);
        tournamentPrizePaid.addActionListener(e -> {
            JTextField tournamentIDField = new JTextField();
            JTextField playerIDField2 = new JTextField();
            JTextField prizeField = new JTextField();
            Object[] message = {
                "TournamentID:", tournamentIDField,
                "PlayerID:", playerIDField2,
                "Paid:", prizeField
            };

            int option = JOptionPane.showInternalConfirmDialog(desktopPane, message, "Tournament Payout", JOptionPane.OK_CANCEL_OPTION);
            if (option == JOptionPane.OK_OPTION) {
                if(tournamentIDField.getText().isEmpty() || playerIDField2.getText().isEmpty() || prizeField.getText().isEmpty()){
                    JOptionPane.showInternalMessageDialog(desktopPane, "Please fill out all fields", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if(!tournamentIDField.getText().matches("[0-9]+")){
                    JOptionPane.showInternalMessageDialog(desktopPane, "Tournament ID must be a number", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if(!playerIDField2.getText().matches("[0-9]+")){
                    JOptionPane.showInternalMessageDialog(desktopPane, "Player ID must be a number", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if(!(prizeField.getText().equals("true") || prizeField.getText().equals("false") || prizeField.getText().equals("True") || prizeField.getText().equals("False"))){
                    JOptionPane.showInternalMessageDialog(desktopPane, "Paid must be 'true' or 'false'", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                String tournamentID = tournamentIDField.getText();
                String playerID2 = playerIDField2.getText();
                String paid = prizeField.getText();

                StringBuilder sql;
                sql = new StringBuilder("INSERT INTO tournament_prize_paid_out (tournamentID, playerID, prizePaid) VALUES ('");
                sql.append(tournamentID);
                sql.append("','");
                sql.append(playerID2);
                sql.append("','");
                sql.append(paid);
                sql.append("');");

               
    
                System.out.println(sql);
    
                try {
                    db.update(sql.toString());
                    db.con.commit();
                   
                } catch (SQLException ex) {
                    System.out.println(ex.getMessage());
                    JOptionPane.showInternalMessageDialog(desktopPane, "The entry may already exist", "Error", JOptionPane.ERROR_MESSAGE);
                    try {
                        db.con.commit();
                    } catch (SQLException exc) {
                        throw new RuntimeException(exc);
                    }
                }

            }


        });


        browseTournamentPrizePaidOut.setText("Browse Tournament Prize Paid");
        browseTournamentPrizePaidOut.addActionListener(this::browseTablaTournamentPrizePaidOut);
        menuConsulta.add(browseTournamentPrizePaidOut);


         sponsorPaid.setText("Sponsor Payment Received");
         menuConsulta.add(sponsorPaid);
          sponsorPaid.addActionListener(e -> {
            JTextField sponsorIDField = new JTextField();
            JTextField sponsorNameField = new JTextField();
            JTextField tournamentIDField = new JTextField();
             JTextField paidField = new JTextField();

            Object[] message = {
                "SponsorID:", sponsorIDField,
                "Sponsor Name:", sponsorNameField,
                "TournamentID:", tournamentIDField,
                "Paid:", paidField
            };

            int option = JOptionPane.showInternalConfirmDialog(desktopPane, message, "Confirm Sponsor Payment", JOptionPane.OK_CANCEL_OPTION);
            if (option == JOptionPane.OK_OPTION) {
                if(sponsorIDField.getText().isEmpty() || sponsorNameField.getText().isEmpty() || tournamentIDField.getText().isEmpty() || paidField.getText().isEmpty()){
                    JOptionPane.showInternalMessageDialog(desktopPane, "Please fill out all fields", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if(!tournamentIDField.getText().matches("[0-9]+")){
                    JOptionPane.showInternalMessageDialog(desktopPane, "Tournament ID must be a number", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if(!sponsorIDField.getText().matches("[0-9]+")){
                    JOptionPane.showInternalMessageDialog(desktopPane, "Sponsor ID must be a number", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if(!(paidField.getText().equals("true") || paidField.getText().equals("false") || paidField.getText().equals("True") || paidField.getText().equals("False"))){
                    JOptionPane.showInternalMessageDialog(desktopPane, "Paid must be 'true' or 'false'", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                String sponsorID = sponsorIDField.getText();
                String sponsorName = sponsorNameField.getText();
                String tournamentID = tournamentIDField.getText();
                String paid = paidField.getText();

                if (sponsorName.contains("'")) {
                    sponsorName = sponsorName.replaceAll("'", "''");
                }

                paid = paid.toLowerCase();

                StringBuilder sql;
                sql = new StringBuilder("INSERT INTO tournament_sponsor_paid (sponsorID, sponsorName, tournamentID, sponsorshipPaid) VALUES ('");
                sql.append(sponsorID);
                sql.append("','");
                sql.append(sponsorName);
                sql.append("','");
                sql.append(tournamentID);
                sql.append("','");
                sql.append(paid);
                sql.append("');");

               
    
                System.out.println(sql);
    
                try {
                    db.update(sql.toString());
                    db.con.commit();
                   
                } catch (SQLException ex) {
                    System.out.println(ex.getMessage());
                    JOptionPane.showInternalMessageDialog(desktopPane, "The entry may already exist", "Error", JOptionPane.ERROR_MESSAGE);
                    try {
                        db.con.commit();
                    } catch (SQLException exc) {
                        throw new RuntimeException(exc);
                    }
                }

            }


        });


        browseTournamentSponsorPaid.setText("Browse Tournament Sponsor Paid");
        browseTournamentSponsorPaid.addActionListener(this::browseTablaTournamentSponsorPaid);
        menuConsulta.add(browseTournamentSponsorPaid);



        menuBar.add(menuConsulta);


        //Menu insertar
        menuInsertar.setMnemonic('i');
        menuInsertar.setText("Insert");

        insertClub.setText("Club");
        insertClub.addActionListener(this::insertTablaClubs);
        menuInsertar.add(insertClub);

        insertJugador.setText("Player");
        insertJugador.addActionListener(this::insertTablaJugador);
        menuInsertar.add(insertJugador);

        insertPatrocinador.setText("Sponsor");
        menuInsertar.add(insertPatrocinador);
        insertPatrocinador.addActionListener(this::insertTablaPatrocinador);

        insertOrganizador.setText("Tournament Organizer");
        menuInsertar.add(insertOrganizador);
        insertOrganizador.addActionListener(this::insertTablaOrganizador);

        insertParticipantes.setText("Tournament Participants");
        menuInsertar.add(insertParticipantes);
        insertParticipantes.addActionListener(this::insertTablaParticipantes);

        insertTorneo.setText("Tournaments");
        menuInsertar.add(insertTorneo);
        insertTorneo.addActionListener(this::insertTablaTorneo);

        insertPartida.setText("Matches");
        menuInsertar.add(insertPartida);
        insertPartida.addActionListener(this::insertTablaPartida);



        insertRanking.setText("Ranking Codes");
        menuInsertar.add(insertRanking);
        insertRanking.addActionListener(this::insertTablaRanking);

        insertTorneoPatro.setText("Tournament Sponsors");
        menuInsertar.add(insertTorneoPatro);
        insertTorneoPatro.addActionListener(this::insertTablaTorneoPatro);

        insertResultCode.setText("Result Codes");
        menuInsertar.add(insertResultCode);
        insertResultCode.addActionListener(this::insertTablaResult);

        menuBar.add(menuInsertar);
        //Fin menu insertas


        //Menu browse
        menuBrowse.setMnemonic('b');
        menuBrowse.setText("Browse");
        menuBrowse.addActionListener(this::menuBrowseActionPerformed);

        browseClubs.setText("Clubs");
        browseClubs.addActionListener(this::browseTablaClub);
        menuBrowse.add(browseClubs);

        browseJugadores.setText("Players");
        browseJugadores.addActionListener(this::browseTablaJugador);
        menuBrowse.add(browseJugadores);


        browsePatro.setText("Sponsor List");
        browsePatro.addActionListener(this::browseTablaPatro);
        menuBrowse.add(browsePatro);

        browseOrganizadores.setText("Tournament Organizers");
        browseOrganizadores.addActionListener(this::browseTablaOrganizadores);
        menuBrowse.add(browseOrganizadores);

        browseParticipantes.setText("Tournament Participants");
        browseParticipantes.addActionListener(this::browseTablaParticipantes);
        menuBrowse.add(browseParticipantes);

        browsePartidas.setText("Matches");
        browsePartidas.addActionListener(this::browseTablaPartidas);
        menuBrowse.add(browsePartidas);

        browseRanking.setText("Ranking Codes");
        browseRanking.addActionListener(this::browseTablaRanking);
        menuBrowse.add(browseRanking);

        browseResults.setText("Result Codes");
        browseResults.addActionListener(this::browseTablaResults);
        menuBrowse.add(browseResults);

        browseTorneos.setText("Tournaments");
        browseTorneos.addActionListener(this::browseTablaTorneos);
        menuBrowse.add(browseTorneos);

        browseTorneosPatro.setText("Tournament Sponsors");
        browseTorneosPatro.addActionListener(this::browseTablaTorneosPatro);
        menuBrowse.add(browseTorneosPatro);

        //Fin menu browse

        //Menu update
        menuUpdate.setMnemonic('u');
        menuUpdate.setText("Update");

        updateClub.setText("Clubs");
        updateClub.addActionListener(this::updateTablaClubs);
        menuUpdate.add(updateClub);

        updateJugador.setText("Players");
        updateJugador.addActionListener(this::updateTablaJugador);
        menuUpdate.add(updateJugador);

        updatePatrocinador.setText("Sponsor List");
        menuUpdate.add(updatePatrocinador);
        updatePatrocinador.addActionListener(this::updateTablaPatrocinador);
        updateOrganizador.setText("Tournament Organizer");
        menuUpdate.add(updateOrganizador);
        updateOrganizador.addActionListener(this::updateTablaOrganizador);

        updateParticipantes.setText("Tournament Participants");
        menuUpdate.add(updateParticipantes);
        updateParticipantes.addActionListener(this::updateTablaParticipantes);

        updateTorneo.setText("Tournaments");
        menuUpdate.add(updateTorneo);
        updateTorneo.addActionListener(this::updateTablaTorneo);

        updatePartida.setText("Matches");
        menuUpdate.add(updatePartida);
        updatePartida.addActionListener(this::updateTablaPartida);


        updateResultados.setText("Result Codes");
        menuUpdate.add(updateResultados);
        updateResultados.addActionListener(this::updateTablaResultados);


        updateRanking.setText("Ranking Codes");
        menuUpdate.add(updateRanking);
        updateRanking.addActionListener(this::updateTablaRanking);
        updateTorneoPatro.setText("Tournament Sponsors");
        menuUpdate.add(updateTorneoPatro);
        updateTorneoPatro.addActionListener(this::updateTablaTorneoPatro);

        menuBar.add(menuUpdate);



        menuBar.add(menuBrowse);


        menuDelete.setMnemonic('d');
        menuDelete.setText("Delete");


        jMenuItem1.setText("Player");
        jMenuItem1.addActionListener(this::jMenuItem1ActionPerformed);
        menuDelete.add(jMenuItem1);

        jMenuItem2.setText("Club");
        jMenuItem2.addActionListener(this::jMenuItem2ActionPerformed);
        menuDelete.add(jMenuItem2);

        jMenuItem3.setText("Organizer");
        jMenuItem3.addActionListener(this::jMenuItem3ActionPerformed);
        menuDelete.add(jMenuItem3);


        jMenuItem4.setText("Participant");
        jMenuItem4.addActionListener(this::jMenuItem4ActionPerformed);
        menuDelete.add(jMenuItem4);

        jMenuItem5.setText("Matches");
        jMenuItem5.addActionListener(this::jMenuItem5ActionPerformed);
        menuDelete.add(jMenuItem5);

        jMenuItem6.setText("Ranking Code");
        jMenuItem6.addActionListener(this::jMenuItem6ActionPerformed);
        menuDelete.add(jMenuItem6);

        jMenuItem7.setText("Tournament Sponsor");
        jMenuItem7.addActionListener(this::jMenuItem7ActionPerformed);
        menuDelete.add(jMenuItem7);

        jMenuItem8.setText("Tournament");
        jMenuItem8.addActionListener(this::jMenuItem8ActionPerformed);
        menuDelete.add(jMenuItem8);

        jMenuItem9.setText("Sponsor");
        jMenuItem9.addActionListener(this::jMenuItem9ActionPerformed);
        menuDelete.add(jMenuItem9);

        jMenuItem10.setText("Result Code");
        jMenuItem10.addActionListener(this::jMenuItem10ActionPerformed);
        menuDelete.add(jMenuItem10);

        menuBar.add(menuDelete);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentMenuItem.setMnemonic('c');
        contentMenuItem.setText("Contents");
        helpMenu.add(contentMenuItem);
        contentMenuItem.addActionListener(e -> {
            try {
                String url = "https://docs.google.com/document/d/1GyoSIXciZZj5Gw4j9gjxa8TbiOki6l7A1VmTIfJva44/edit";
                if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                    Desktop.getDesktop().browse(new URI(url));
                } else {
                    JOptionPane.showInternalMessageDialog(desktopPane, "Your system does not support this functionality.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception ignored) {
            }
        });

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);
        aboutMenuItem.addActionListener(e -> {
            String texto =
                    """
                            <html><b>Chess Tournament Manager</b>
                            Version 1.0
                            Developed by:
                            Aaron Velez Coronado
                            Angel Laureano Borquez Fimbres
                            Juan Diego Quijada Castillo</html>""";
            texto = texto.replace("\n", "<br>");
            JLabel labelTexto = new JLabel(texto);
            JOptionPane.showInternalOptionDialog(desktopPane, labelTexto, "About", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, new String[]{"OK"}, "OK");
        });

        newConection.setMnemonic('n');
        newConection.setText("New DB Conection");
        helpMenu.add(newConection);
        newConection.addActionListener(e -> {
            db.DB = null;
            db = Database.getDatabase(desktopPane, false);
        });



        JMenuItem setBackgroundItem = new JMenuItem();
        setBackgroundItem.setMnemonic('s');
        setBackgroundItem.setText("Set wallpaper");
        helpMenu.add(setBackgroundItem);
        setBackgroundItem.addActionListener(e -> establecerFondoDePantalla());

        JMenuItem deleteBackgroundItem = new JMenuItem();
        deleteBackgroundItem.setMnemonic('d');
        deleteBackgroundItem.setText("Delete wallpaper");
        helpMenu.add(deleteBackgroundItem);
        deleteBackgroundItem.addActionListener(e -> eliminarFondoDePantalla());

        JMenuItem salirMenuItem = new JMenuItem();
        salirMenuItem.setMnemonic('e');
        salirMenuItem.setText("Exit");
        helpMenu.add(salirMenuItem);
        salirMenuItem.addActionListener(e -> quieresSalir());



        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void insertTablaClubs(java.awt.event.ActionEvent evt) {
        InsertClub dlg = new InsertClub(db, desktopPane);
        dlg.setVisible(true);
        this.desktopPane.add(dlg);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void insertTablaJugador(java.awt.event.ActionEvent evt) {
        InsertPlayer dialogo = new InsertPlayer(db, desktopPane);
        dialogo.setSize(400, dialogo.getHeight());
        dialogo.setVisible(true);
        this.desktopPane.add(dialogo);
    }

    private void insertTablaPatrocinador(java.awt.event.ActionEvent evt) {
        InsertSponsor dialogo = new InsertSponsor(db, desktopPane);
        dialogo.setVisible(true);
        this.desktopPane.add(dialogo);
    }

    private void insertTablaOrganizador(java.awt.event.ActionEvent evt) {
        InsertOrganizer dialogo = new InsertOrganizer(db, desktopPane);
        dialogo.setSize(350, dialogo.getHeight());
        dialogo.setVisible(true);
        this.desktopPane.add(dialogo);
    }

    private void insertTablaParticipantes(java.awt.event.ActionEvent evt) {
        InsertTournamentParticipant dialogo = new InsertTournamentParticipant(db, desktopPane);
        dialogo.setSize(350, dialogo.getHeight());
        dialogo.setVisible(true);
        this.desktopPane.add(dialogo);
    }

    private void insertTablaPartida(java.awt.event.ActionEvent evt) {
        InsertMatches dialogo = new InsertMatches(db, desktopPane);
        dialogo.setVisible(true);
        this.desktopPane.add(dialogo);
    }

    private void insertTablaTorneo(java.awt.event.ActionEvent evt) {
        InsertTournament dialogo = new InsertTournament(db, desktopPane);
        dialogo.setVisible(true);
        this.desktopPane.add(dialogo);
    }

    private void insertTablaResult(java.awt.event.ActionEvent evt) {
        insertResultCode dialogo = new insertResultCode(db, desktopPane);
        dialogo.setVisible(true);
        this.desktopPane.add(dialogo);
    }

    private void insertTablaRanking(java.awt.event.ActionEvent evt) {
        InsertRanking dialogo = new InsertRanking(db, desktopPane);
        dialogo.setVisible(true);
        this.desktopPane.add(dialogo);
    }


    private void insertTablaTorneoPatro(java.awt.event.ActionEvent evt) {
        InsertTornamentSponsor dialogo = new InsertTornamentSponsor(db, desktopPane);
        dialogo.setVisible(true);
        this.desktopPane.add(dialogo);
    }

    private void browseTablaClub(java.awt.event.ActionEvent evt) {

        final String sql = "SELECT club_id AS \"ID\", club_name AS \"Club\", club_address AS \"Address\", other_club_details AS \"Details\", organizer_id AS \"Organizer ID\" FROM Chess_Clubs ORDER BY club_id";


        try {
            ResultSet rs = db.query(sql);

            JDBCTableAdapter modelo = new JDBCTableAdapter(rs, false);
            TableBrowser browser = new TableBrowser("Clubs", modelo, desktopPane, false, db);

            browser.setVisible(true);

            this.desktopPane.add(browser);

        } catch (SQLException ignored) {
        }
    }

    private void browseTablaPlayerClubFeesPaid(java.awt.event.ActionEvent evt) {

        final String sql = "SELECT playerid AS \"Player ID\", clubid AS \"Club ID\", feepaid AS \"Fee Paid\" FROM player_club_fees_paid ORDER BY playerid ASC, clubid ASC";


        try {
            ResultSet rs = db.query(sql);

            JDBCTableAdapter modelo = new JDBCTableAdapter(rs, false);
            TableBrowser browser = new TableBrowser("Player Club Fees Paid", modelo, desktopPane, false, db);

            browser.setVisible(true);

            this.desktopPane.add(browser);

        } catch (SQLException ignored) {
        }
    }

    private void browseTablaTournamentPrizePaidOut(java.awt.event.ActionEvent evt) {

        final String sql = "SELECT tournamentid AS \"Tournament ID\", playerid AS \"Player ID\", prizepaid AS \"Prize Paid\" FROM tournament_prize_paid_out ORDER BY tournamentid ASC, playerid ASC";


        try {
            ResultSet rs = db.query(sql);

            JDBCTableAdapter modelo = new JDBCTableAdapter(rs, false);
            TableBrowser browser = new TableBrowser("Tournament Prize Paid Out", modelo, desktopPane, false, db);

            browser.setVisible(true);

            this.desktopPane.add(browser);

        } catch (SQLException ignored) {
        }
    }

    private void browseTablaTournamentSponsorPaid(java.awt.event.ActionEvent evt) {

        final String sql = "SELECT sponsorid AS \"Sponsor ID\", sponsorname AS \"Sponsor name\", tournamentid AS \"Tournament ID\", sponsorshippaid AS \"Sponsorship Paid\" FROM tournament_sponsor_paid ORDER BY sponsorid ASC, tournamentid ASC";


        try {
            ResultSet rs = db.query(sql);

            JDBCTableAdapter modelo = new JDBCTableAdapter(rs, false);
            TableBrowser browser = new TableBrowser("Tournament Sponsor Paid", modelo, desktopPane, false, db);

            browser.setVisible(true);

            this.desktopPane.add(browser);

        } catch (SQLException ignored) {
        }
    }

    private void mostrarConsulta1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed

        final String sql = "SELECT tournament_id AS \"Tournament ID\", organizer_id AS \"organizer id\", tournament_start_date AS \"Start Date\"," +
                " tournament_end_date AS \"End Date\", tournament_name AS \"Tournament Date\", tournament_details AS \"Details\" FROM Tournaments " +
                "NATURAL JOIN (SELECT tournament_id  FROM Tournaments  EXCEPT SELECT tournament_id FROM Actual_Tournament_Sponsors ) AS \"Tournaments\"";


        try {
            ResultSet rs = db.query(sql);

            JDBCTableAdapter modelo = new JDBCTableAdapter(rs, false);
            TableBrowser browser = new TableBrowser("Tournament With No Sponsors", modelo, desktopPane, false, db);

            browser.setVisible(true);

            this.desktopPane.add(browser);

        } catch (SQLException ignored) {
        }
    }
    private void mostrarConsulta2(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed

        final String sql = "SELECT player_id AS Player_ID, club_id AS Club_ID, ranking_code AS Ranking, first_name, last_name, address, phone_number AS Phone_Number, email_address AS Email, tournament_id AS Tournament_ID, final_result AS Result \n" +
                "FROM Players NATURAL JOIN (SELECT * FROM Player_Tournament_Participation WHERE final_result='Win' ) as Matches;";


        try {
            ResultSet rs = db.query(sql);

            JDBCTableAdapter modelo = new JDBCTableAdapter(rs, false);
            TableBrowser browser = new TableBrowser("Tournament Winners", modelo, desktopPane, false, db);

            browser.setVisible(true);

            this.desktopPane.add(browser);

        } catch (SQLException ignored) {
            
        }
    }
    private void mostrarConsulta3(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed

        final String sql = "SELECT p.club_id AS \"Club ID\", COUNT(p.club_id) AS \"No. Players\", c.club_name AS \"Club\""+
        "FROM Players p JOIN Chess_Clubs c ON (p.club_id = c.club_id) GROUP BY p.club_id, c.club_name";

        try {
            ResultSet rs = db.query(sql);

            JDBCTableAdapter modelo = new JDBCTableAdapter(rs, false);
            TableBrowser browser = new TableBrowser("Number of players per club", modelo, desktopPane, false, db);

            browser.setVisible(true);

            this.desktopPane.add(browser);

        } catch (SQLException ignored) {
        }
    }

    private void browseTablaJugador(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed


        final String sql = "SELECT player_id AS \"Player ID\", club_id AS \"Club ID\", ranking_code AS \"Ranking\", first_name AS \"First Name\", " +
                "last_name AS \"Last Name\", address AS \"Address\", phone_number AS \"Phone Number\", email_address AS \"Email\", other_player_details AS \"Details\" " +
                "FROM Players ORDER BY player_id";
        try {
            ResultSet rs = db.query(sql);

            JDBCTableAdapter modelo = new JDBCTableAdapter(rs, false);
            TableBrowser browser = new TableBrowser("Players", modelo, desktopPane, false, db);
            browser.setVisible(true);
            this.desktopPane.add(browser);

        } catch (SQLException ignored) {

        }


    }

    private void browseTablaTorneosPatro(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        final String sql = "SELECT tournament_id AS \"Tournament ID\", sponsor_id AS \"Sponsor ID\"\n" +
                "FROM Actual_Tournament_Sponsors";
        try {
            ResultSet rs = db.query(sql);

            JDBCTableAdapter modelo = new JDBCTableAdapter(rs, false);
            TableBrowser browser = new TableBrowser("Tournament Sponsors", modelo, desktopPane, false, db);
            browser.setVisible(true);
            this.desktopPane.add(browser);

        } catch (SQLException ignored) {

        }
    }


    private void browseTablaPatro(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        final String sql = "SELECT sponsor_id AS \"Sponsor ID\", sponsor_name AS \"Sponsor Name\", sponsor_phone AS \"Sponsor Phone\", other_sponsor_details AS \"Details\" FROM List_of_Sponsors";

        try {
            ResultSet rs = db.query(sql);

            JDBCTableAdapter modelo = new JDBCTableAdapter(rs, false);
            TableBrowser browser = new TableBrowser("List of Sponsors", modelo, desktopPane, false, db);
            browser.setVisible(true);
            this.desktopPane.add(browser);

        } catch (SQLException ignored) {

        }
    }

    private void browseTablaOrganizadores(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        final String sql = "SELECT organizer_id as \"Organizer ID\", club_id AS \"Club ID\", organizer_name AS \"Organizer Name\", organizer_details AS \"Details\" FROM Tournament_Organizers";

        try {
            ResultSet rs = db.query(sql);

            JDBCTableAdapter modelo = new JDBCTableAdapter(rs, false);
            TableBrowser browser = new TableBrowser("Tournament Organizers", modelo, desktopPane, false, db);
            browser.setVisible(true);
            this.desktopPane.add(browser);

        } catch (SQLException ignored) {

        }
    }

    private void browseTablaParticipantes(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        final String sql = "SELECT player_id AS \"Player ID\", tournament_id AS \"Tournament ID\", final_result AS \"Final Result\" FROM Player_Tournament_Participation";
        try {
            ResultSet rs = db.query(sql);

            JDBCTableAdapter modelo = new JDBCTableAdapter(rs, false);
            TableBrowser browser = new TableBrowser("Tournament Participants", modelo, desktopPane, false, db);
            browser.setVisible(true);
            this.desktopPane.add(browser);

        } catch (SQLException ignored) {

        }
    }

    private void browseTablaPartidas(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        final String sql = "SELECT tournament_id AS \"Tournament ID\", player_id1 AS \"ID of Player 1\", player_id2 AS \"ID of Player 2\", match_start_datetime AS \"Start Time\", match_end_datetime AS \"End Time\", result_code AS \"Result Code\" FROM Matches";
        try {
            ResultSet rs = db.query(sql);

            JDBCTableAdapter modelo = new JDBCTableAdapter(rs, false);
            TableBrowser browser = new TableBrowser("Matches", modelo, desktopPane, false, db);
            browser.setVisible(true);
            this.desktopPane.add(browser);

        } catch (SQLException ignored) {

        }
    }

    private void browseTablaRanking(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        final String sql = "SELECT ranking_code AS \"Ranking Code\", ranking_description AS \"Description\" FROM Ref_Ranking_Codes";
        try {
            ResultSet rs = db.query(sql);

            JDBCTableAdapter modelo = new JDBCTableAdapter(rs, false);
            TableBrowser browser = new TableBrowser("Ranking Codes", modelo, desktopPane, false, db);
            browser.setVisible(true);
            this.desktopPane.add(browser);

        } catch (SQLException ignored) {

        }
    }

    private void browseTablaResults(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        final String sql = "SELECT result_code AS \"Result Code\", result_description AS \"Description\" FROM Ref_Result_Codes";
        try {
            ResultSet rs = db.query(sql);

            JDBCTableAdapter modelo = new JDBCTableAdapter(rs, false);
            TableBrowser browser = new TableBrowser("Result Codes", modelo, desktopPane, false, db);
            browser.setVisible(true);
            this.desktopPane.add(browser);

        } catch (SQLException ignored) {

        }
    }


    private void browseTablaTorneos(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        final String sql = "SELECT tournament_id AS \"Tournament ID\", organizer_id AS \"Organizer ID\", tournament_start_date AS \"Start Date\", tournament_end_date AS" +
                " \"End Date\", tournament_name AS \"Tournament Name\", tournament_details AS \"Details\" FROM Tournaments";
        try {
            ResultSet rs = db.query(sql);

            JDBCTableAdapter modelo = new JDBCTableAdapter(rs, false);
            TableBrowser browser = new TableBrowser("Tournaments", modelo, desktopPane, false, db);
            browser.setVisible(true);
            this.desktopPane.add(browser);

        } catch (SQLException ignored) {

        }
    }


    private void updateTablaClubs(ActionEvent evt) {
        final String sql = "SELECT club_id AS \"ID\", club_name AS \"Club\", club_address AS \"Address\", other_club_details AS \"Details\", organizer_id AS \"Organizer ID\" FROM Chess_Clubs ORDER BY club_id";
        HashSet<Integer> hs = new HashSet<>();
        hs.add(0);
        try {
            ResultSet rs = db.query(sql);

            JDBCTableAdapter modelo = new JDBCTableAdapter(rs, true, hs);


            modelo.addTableModelListener(new Updater(db, "Chess_Clubs", "club_id"));

            TableBrowser browser = new TableBrowser("Clubs", modelo, desktopPane, true, db);

            browser.setVisible(true);

            this.desktopPane.add(browser);

        } catch (SQLException ignored) {
        }
    }

    private void updateTablaJugador(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed


        final String sql = "SELECT player_id AS \"Player ID\", club_id AS \"Club ID\", ranking_code AS \"Ranking\", first_name AS \"First Name\", " +
                "last_name AS \"Last Name\", address AS \"Address\", phone_number AS \"Phone Number\", email_address AS \"Email\", other_player_details AS \"Details\" " +
                "FROM Players ORDER BY player_id";
        HashSet<Integer> hs = new HashSet<>();
        hs.add(0); hs.add(1); hs.add(2);
        try {
            ResultSet rs = db.query(sql);

            JDBCTableAdapter modelo = new JDBCTableAdapter(rs, true, hs);
            modelo.addTableModelListener(new Updater(db, "Players", "player_id"));

            TableBrowser browser = new TableBrowser("Players", modelo, desktopPane, true, db);
            browser.setVisible(true);
            this.desktopPane.add(browser);

        } catch (SQLException ignored) {
            
        }


    }

    private void updateTablaTorneoPatro(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        final String sql = "SELECT tournament_id AS \"Tournament ID\", sponsor_id AS \"Sponsor ID\"\n" +
                "\tFROM Actual_Tournament_Sponsors";
        String[] pkColumns = {"sponsor_id", "tournament_id"};
        HashSet<Integer> hs = new HashSet<>();
        hs.add(0);
        hs.add(1);
        try {
            ResultSet rs = db.query(sql);


            JDBCTableAdapter modelo = new JDBCTableAdapter(rs, true, hs);
            modelo.addTableModelListener(new Updater(db, "Actual_Tournament_Sponsors", pkColumns));

            TableBrowser browser = new TableBrowser("Actual Tournament Sponsors", modelo, desktopPane, true, db);
            browser.setVisible(true);
            this.desktopPane.add(browser);

        } catch (SQLException ignored) {
        }
    }


    private void updateTablaPatrocinador(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        final String sql = "SELECT sponsor_id AS \"Sponsor ID\", sponsor_name AS \"Sponsor Name\", sponsor_phone AS \"Phone\", other_sponsor_details AS \"Details\" FROM List_of_Sponsors";

        try {
            ResultSet rs = db.query(sql);

            JDBCTableAdapter modelo = new JDBCTableAdapter(rs, true);
            modelo.addTableModelListener(new Updater(db, "List_of_Sponsors", "sponsor_id"));

            TableBrowser browser = new TableBrowser("List of Sponsors", modelo, desktopPane, true, db);
            browser.setVisible(true);
            this.desktopPane.add(browser);

        } catch (SQLException ignored) {
            
        }
    }

    private void updateTablaOrganizador(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        final String sql = "SELECT organizer_id as \"Organizer ID\", club_id AS \"Club ID\", organizer_name AS \"Organizer Name\", organizer_details AS \"Details\" FROM Tournament_Organizers";
        HashSet<Integer> hs = new HashSet<>();
        hs.add(0);
        hs.add(1);
        try {
            ResultSet rs = db.query(sql);

            JDBCTableAdapter modelo = new JDBCTableAdapter(rs, true, hs);
            modelo.addTableModelListener(new Updater(db, "Tournament_Organizers", "organizer_id"));

            TableBrowser browser = new TableBrowser("Tournament Organizers", modelo, desktopPane, true, db);
            browser.setVisible(true);
            this.desktopPane.add(browser);

        } catch (SQLException ignored) {
            
        }
    }

    private void updateTablaParticipantes(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        final String sql = "SELECT player_id AS \"Player ID\", tournament_id AS \"Tournament ID\", final_result AS \"Final Result\" FROM Player_Tournament_Participation";
        String[] pkColumns = {"player_id", "tournament_id"};
        HashSet<Integer> hs = new HashSet<>();
        hs.add(0);
        hs.add(1);
        try {
            ResultSet rs = db.query(sql);

            JDBCTableAdapter modelo = new JDBCTableAdapter(rs, true, hs);
            modelo.addTableModelListener(new Updater(db, "Player_Tournament_Participation", pkColumns));

            TableBrowser browser = new TableBrowser("Tournament Participants", modelo, desktopPane, true, db);
            browser.setVisible(true);
            this.desktopPane.add(browser);

        } catch (SQLException ignored) {
            
        }
    }

    private void updateTablaPartida(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        final String sql = "SELECT tournament_id AS \"Tournament ID\", player_id1 AS \"ID of Player 1\", player_id2 AS \"ID of Player 2\", match_start_datetime AS \"Start Time\", match_end_datetime AS \"End Time\", result_code AS \"Result Code\" FROM Matches";
        String[] pkColumns = {"tournament_id", "player_id1", "player_id2", "match_start_datetime"};
        HashSet<Integer> hs = new HashSet<>();
        hs.add(0);
        hs.add(1);
        hs.add(2);
        hs.add(3);
        hs.add(5);
        try {
            ResultSet rs = db.query(sql);

            JDBCTableAdapter modelo = new JDBCTableAdapter(rs, true, hs);
            modelo.addTableModelListener(new Updater(db, "Matches", pkColumns));

            TableBrowser browser = new TableBrowser("Matches", modelo, desktopPane, true, db);
            browser.setVisible(true);
            this.desktopPane.add(browser);

        } catch (SQLException ignored) {
            
        }
    }

    private void updateTablaRanking(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        final String sql = "SELECT ranking_code AS \"Ranking Code\", ranking_description AS \"Description\" FROM Ref_Ranking_Codes";
        try {
            ResultSet rs = db.query(sql);

            JDBCTableAdapter modelo = new JDBCTableAdapter(rs, true);
            modelo.addTableModelListener(new Updater(db, "Ref_Ranking_Codes", "ranking_code"));

            TableBrowser browser = new TableBrowser("Ref Ranking Codes", modelo, desktopPane, true, db);
            browser.setVisible(true);
            this.desktopPane.add(browser);

        } catch (SQLException ignored) {
            
        }
    }

    private void updateTablaResultados(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        final String sql = "SELECT result_code AS \"Result Code\", result_description AS \"Description\" FROM Ref_Result_Codes";
        try {
            ResultSet rs = db.query(sql);

            JDBCTableAdapter modelo = new JDBCTableAdapter(rs, true);
            modelo.addTableModelListener(new Updater(db, "Ref_Result_Codes", "result_code"));
            TableBrowser browser = new TableBrowser("Result Codes", modelo, desktopPane, true, db);
            browser.setVisible(true);
            this.desktopPane.add(browser);

        } catch (SQLException ignored) {
            
        }
    }

    private void updateTablaTorneo(ActionEvent evt) {
        final String sql = "SELECT tournament_id AS \"Tournament ID\", organizer_id AS \"Organizer ID\", tournament_start_date AS \"Start Date\", tournament_end_date AS \"End Date\", tournament_name AS \"Tournament Name\", tournament_details AS \"Details\" FROM Tournaments";
        HashSet<Integer> hs = new HashSet<>();
        hs.add(0); hs.add(1);
        try {
            ResultSet rs = db.query(sql);

            JDBCTableAdapter modelo = new JDBCTableAdapter(rs, true, hs);
            modelo.addTableModelListener(new Updater(db, "Tournaments", "tournament_id"));
            TableBrowser browser = new TableBrowser("Tournaments", modelo, desktopPane, true, db);
            browser.setVisible(true);
            this.desktopPane.add(browser);

        } catch (SQLException ignored) {
            
        }
    }


    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        DeleteJugadorDialog dialog = new DeleteJugadorDialog(new javax.swing.JFrame(), db, desktopPane);
        dialog.setVisible(true);
        desktopPane.add(dialog);
    }

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        DeleteClubDialog dialog = new DeleteClubDialog(this, db, desktopPane);
        dialog.setVisible(true);
        desktopPane.add(dialog);
    }

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        DeleteOrganizadorDialog dialog = new DeleteOrganizadorDialog(new javax.swing.JFrame(), db, desktopPane);
        dialog.setVisible(true);
        desktopPane.add(dialog);
    }

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        DeleteParticipantesDialog dialog = new DeleteParticipantesDialog(new javax.swing.JFrame(), db, desktopPane);
        dialog.setVisible(true);
        desktopPane.add(dialog);
    }

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        DeletePartidasDialog dialog = new DeletePartidasDialog(new javax.swing.JFrame(), db, desktopPane);
        dialog.setVisible(true);
        desktopPane.add(dialog);
    }

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        DeleteRankingDialog dialog = new DeleteRankingDialog(new javax.swing.JFrame(), db, desktopPane);
        dialog.setVisible(true);
        desktopPane.add(dialog);
    }

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        DeleteTornPatroDialog dialog = new DeleteTornPatroDialog(new javax.swing.JFrame(), db, desktopPane);
        dialog.setVisible(true);
        desktopPane.add(dialog);
    }

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        DeleteTorneoDialog dialog = new DeleteTorneoDialog(new javax.swing.JFrame(), db, desktopPane);
        dialog.setVisible(true);
        desktopPane.add(dialog);
    }

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        DeletePatrocinadorDialog dialog = new DeletePatrocinadorDialog(new JFrame(), db, desktopPane);
        dialog.setVisible(true);
        desktopPane.add(dialog);
    }

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        DeleteResultDialog dialog = new DeleteResultDialog(new JFrame(), db, desktopPane);
        dialog.setVisible(true);
        desktopPane.add(dialog);
    }


    private void menuBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBrowseActionPerformed
        // TODO add your handling code here:
    }

    private void menuConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBrowseActionPerformed
        // TODO add your handling code here:
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        com.formdev.flatlaf.FlatDarculaLaf.install();

        java.awt.EventQueue.invokeLater(() -> new MainApp().setVisible(true));
    }

    private void quieresSalir(){
        int opcion = JOptionPane.showInternalOptionDialog(desktopPane, "Are you sure?", "Exit", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new String[]{"Yes", "No"}, "No");
        if (opcion == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }

    private void setIcono() {
        this.setIconImage(iconoAjedrez.getImage());
    }

    private void establecerFondoDePantalla(){
        String URLIngresado = JOptionPane.showInternalInputDialog(desktopPane, "Enter the URL of the image", "Set wallpaper", JOptionPane.INFORMATION_MESSAGE);
        try {
            URL url = new URL(URLIngresado);
            BufferedImage image = ImageIO.read(url);
            File outputFile = new File("fondoDePantalla.png");
            ImageIO.write(image, "png", outputFile);
            fondo = image;
            desktopPane.repaint();
        } catch (IOException e) {
            JOptionPane.showInternalMessageDialog(desktopPane, "The URL is invalid", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void eliminarFondoDePantalla() {
        int opcion = JOptionPane.showInternalOptionDialog(desktopPane, "Are you sure?", "Exit", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new String[]{"Yes", "No"}, "No");
        if (opcion == JOptionPane.YES_OPTION) {
            File wallpaperFile = new File("fondoDePantalla.png");
            if (wallpaperFile.exists()) {
                if (wallpaperFile.delete()) {
                    fondo = null;
                    desktopPane.repaint();
                    JOptionPane.showInternalMessageDialog(desktopPane, "Wallpaper deleted", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showInternalMessageDialog(desktopPane, "Error deleting wallpaper", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showInternalMessageDialog(desktopPane, "No wallpaper to delete", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private javax.swing.JDesktopPane desktopPane;

}
